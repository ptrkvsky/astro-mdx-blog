---
import BaseLayout from '@layouts/BaseLayout.astro';
import { toHTML } from '@portabletext/to-html';
import type { Frontmatter } from '@interfaces/Frontmatter';
import TableOfContent from '@features/blog/components/TableOfContent';
import getSchemaBlogPosting from 'src/helpers/getSchemaBlogPosting';
import type { AstroComponentFactory } from 'astro/dist/types/runtime/server';
import type { MarkdownHeading } from 'astro';
import ObserverTableOfContent from '@features/blog/scripts/ObserverTableOfContent.astro';
import Header from '@components/Header.astro';
import Breadcrumb, { BreadcrumbItem } from '@components/Breadcrumb.astro';
import fetchSanity from '@helpers/fetchSanity';
import { queryAllPosts } from '@features/blog/queries/queryAllPosts';
import getPostsUrlParams from '@features/blog/functions/getPostsUrlParams';
import type { SanityAllPost } from '@features/blog/interfaces/SanityAllPost';
import type { BlockContent, Post } from '@interfaces/SanitySchema';

interface AstroProps {
  post: Post;
  params: {
    slug: {
      current: string;
    };
  };
}

export async function getStaticPaths() {
  const sanityProjects = await fetchSanity<SanityAllPost>(queryAllPosts);
  const params = sanityProjects && getPostsUrlParams(sanityProjects);

  return params;
}

const { post } = Astro.props as AstroProps;

const schema = getSchemaBlogPosting(post);

function getHeadins(text: BlockContent) {
  return text
    .map((textItem) => {
      if (
        textItem.style === 'h2' ||
        textItem.style === 'h3' ||
        textItem.style === 'h4' ||
        textItem.style === 'h5' ||
        textItem.style === 'h6'
      ) {
        return {
          text: textItem.children[0].text,
          hn: textItem.style,
        };
      }
    })
    .filter((element) => element !== undefined);
}

const postContent = toHTML(post.bodyRaw, {
  components: {
    /* optional object of custom components to use */
  },
});

const toootoyyoy = getHeadins(post.bodyRaw || []);
console.log(toootoyyoy);
// const hasFooterLink = frontmatter.hasFooterLink;

const breadcrumbItems: BreadcrumbItem[] = [
  {
    name: 'Accueil',
    path: '/',
  },
  {
    name: 'Articles',
    path: '/posts',
  },
  {
    name: post?.categories ? post?.categories[0]?._key : '',
    path: '/',
  },
];
---

<BaseLayout
  title={post?.seoTitle || ''}
  schema={schema}
  description={post?.seoDescription || ''}
  image={post.seoImage?.asset.url}
>
  <div slot="main" class="post">
    <ObserverTableOfContent />
    <Header slot="before-main">
      <Breadcrumb breadcrumbItems={breadcrumbItems} />
      <h1 class="pb-8 font-bold conteneur">{post.title}</h1>
    </Header>
    <div class="wrapper-post">
      <aside class="wrapper-table-of-content px-4 lg:px-0">
        <!-- <TableOfContent client:load headings={headings} /> -->
      </aside>
      <article class="post-content" set:html={postContent}></article>
    </div>
  </div>
  <!-- <div slot="main" class="post">
    <div class="wrapper-post">
      {
        frontmatter.category !== 'Définition' && (
          <aside class="wrapper-table-of-content px-4 lg:px-0">
            <TableOfContent client:load headings={headings} />
          </aside>
        )
      }
      <article class="post-content">
        <p class="time">
          Temps de lecture <span class="highlight font-semibold"
            >{frontmatter.minutesRead} minutes
          </span>
        </p>
        <MdxContent />
        {
          !hasFooterLink && (
            <p>
              N'hésitez pas à me faire vos retours en commentaire et m'envoyer
              un message si vous recherchez
              <a class="py-8" href="/" title="Développeur freelance React">
                développeur React freelance
              </a>
              .
            </p>
          )
        }
      </article>
    </div>
  </div> -->
</BaseLayout>

<style is:global>
  h1 {
    @apply mb-3 text-2xl lg:text-4xl;
  }

  .post-content {
    @apply pb-8;
  }
  .post-content ul {
    @apply list-disc ml-6;
  }
  .post-content ul li {
    @apply m-0;
  }
  .post-content a {
    @apply text-pink-600;
  }

  .post-content img {
    aspect-ratio: attr(data-width) / attr(data-height);
  }

  .post-content iframe {
    @apply mb-4;
    max-width: calc(100vw - 2rem);
  }

  .post-content h1,
  .post-content h2,
  .post-content h3,
  .post-content h4,
  .post-content h5,
  .post-content h6 {
    @apply font-semibold text-indigo-600;
  }

  .post-content h2,
  .post-content h3,
  .post-content h4,
  .post-content h5,
  .post-content h6 {
    @apply font-semibold text-indigo-600 mt-10 mb-6 text-2xl lg:text-3xl;
  }

  .post-content p,
  .post-content ul,
  .post-content li,
  .post-content strong {
    @apply my-6 text-base;
  }

  .post-content blockquote {
    @apply relative italic my-7 w-full px-12 py-4 bg-purple-50 border-l-4 border-gray-300;
  }

  .post-content blockquote p {
    @apply m-0;
  }

  .post-content blockquote:before {
    content: '“';
    font-family: 'Times New Roman', serif;
    font-size: 6em;
    font-weight: bold;
    position: absolute;
    left: -8px;
    top: 4px;
    opacity: 0.25;
  }

  .post-content pre {
    @apply mb-3 px-6 py-4 bg-gray-200 border-l-4 border-gray-300 w-full overflow-auto;
    max-width: calc(100vw - 2rem);
  }
  .wrapper-post {
    @apply relative lg:justify-between max-w-6xl mx-auto lg:flex;
  }
  .post-content {
    @apply max-w-2xl bg-white relative z-10 px-4 lg:px-0;
  }
  .post-content strong {
    @apply text-pink-500;
  }
  .post-content .time {
    @apply mt-0 pt-4 mb-4 lg:mb-5 text-sm text-gray-800;
  }
  .post-content .time .highlight {
    @apply text-pink-500;
  }

  .wrapper-table-of-content {
    @apply lg:max-w-xs max-h-screen sticky order-last top-0;
  }

  .toc ul {
    max-height: calc(100vh - 45px);
    overflow: auto;
  }
  .toc ul::-webkit-scrollbar {
    width: 5px;
  }

  li.active {
    @apply border-pink-500;
  }
  li.active:hover {
    @apply border-pink-600;
  }
  li.active:hover a {
    @apply text-pink-600;
  }
  li.active a {
    @apply text-pink-500 font-bold;
  }
</style>
